import sqlite3
import aiohttp
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
from database import get_theaters, get_performances, buy_ticket

logger = logging.getLogger(__name__)

SELECTING_ACTION, CHOOSING_THEATER, BUYING_TICKET = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")

    context.user_data.clear()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç!",
        reply_markup=ReplyKeyboardMarkup([["–°–ø–∏—Å–æ–∫ —Ç–µ–∞—Ç—Ä–æ–≤"]], resize_keyboard=True)
    )
    return SELECTING_ACTION


async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == "–°–ø–∏—Å–æ–∫ —Ç–µ–∞—Ç—Ä–æ–≤":
        if theaters := get_theaters():
            theater_names = [t[1] for t in theaters]
            keyboard = [theater_names[i:i + 2] for i in range(0, len(theater_names), 2)]
            keyboard.append(["–ù–∞–∑–∞–¥"])

            context.user_data['theaters'] = {t[1]: t[0] for t in theaters}

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∞—Ç—Ä:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return CHOOSING_THEATER
        else:
            await update.message.reply_text("–¢–µ–∞—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return SELECTING_ACTION

    elif text == "–ù–∞–∑–∞–¥":
        return await start(update, context)

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
    return SELECTING_ACTION


async def choose_theater(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text

        if text == "–ù–∞–∑–∞–¥":
            return await select_action(update, context)

        if 'theaters' not in context.user_data or text not in context.user_data['theaters']:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∞—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
            return CHOOSING_THEATER

        theater_id = context.user_data['theaters'][text]
        performances = get_performances(theater_id)

        if not performances:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π")
            return CHOOSING_THEATER

        conn = sqlite3.connect("theater_tickets.db")
        cursor = conn.cursor()
        cursor.execute(
            "SELECT name, address, latitude, longitude FROM theaters WHERE id = ?",
            (theater_id,)
        )
        name, address, lat, lon = cursor.fetchone()
        conn.close()

        map_url = f"https://static-maps.yandex.ru/1.x/?ll={lon},{lat}&size=450,450&z=16&l=map&pt={lon},{lat},pm2rdl"
        try:
            async with aiohttp.ClientSession() as session:
                if (resp := await session.get(map_url)).status == 200:
                    await context.bot.send_photo(
                        chat_id=update.message.chat_id,
                        photo=map_url,
                        caption=f"üìç {name}\nüèõ {address}"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã: {e}")
            await update.message.reply_text(f"–ê–¥—Ä–µ—Å —Ç–µ–∞—Ç—Ä–∞: {address}")

        context.user_data['current_performances'] = {str(p[0]): p for p in performances}
        performances_msg = "\n\n".join(
            f"üé≠ {p[1]}\nüìÖ {p[2]} {p[3]}\nüíµ {p[4]} —Ä—É–±.\nüé´ –û—Å—Ç–∞–ª–æ—Å—å: {p[5]}\nüÜî ID: {p[0]}"
            for p in performances
        )

        await update.message.reply_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏:\n\n{performances_msg}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Å–ø–µ–∫—Ç–∞–∫–ª—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return BUYING_TICKET

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await start(update, context)


async def buy_ticket_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text

        if not (performances := context.user_data.get('current_performances')):
            await update.message.reply_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        if text not in performances:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ–∫—Ç–∞–∫–ª—è:")
            return BUYING_TICKET

        if buy_ticket(int(text)):
            await update.message.reply_text(
                "‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–µ–∫—Ç–∞–∫–ª—å (/start)",
                reply_markup=ReplyKeyboardRemove()
            )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å–ø–µ–∫—Ç–∞–∫–ª—è:")
        return BUYING_TICKET
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
